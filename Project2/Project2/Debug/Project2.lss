
Project2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000004ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000476  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800100  00800100  000004ea  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004ea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000051c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  0000055c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c63  00000000  00000000  000005ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a94  00000000  00000000  0000120f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000628  00000000  00000000  00001ca3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b0  00000000  00000000  000022cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000052b  00000000  00000000  0000237c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000018b  00000000  00000000  000028a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00002a32  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
   4:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
   8:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
   c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  10:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  14:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  18:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  1c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  20:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  24:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  28:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  2c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  30:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  34:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  38:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  3c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  40:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  44:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  48:	0c 94 92 01 	jmp	0x324	; 0x324 <__vector_18>
  4c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  50:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  54:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  58:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  5c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  60:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  64:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  68:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  6c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  70:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  74:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  78:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  7c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  80:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  84:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  88:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  8c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  90:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  94:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  98:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  9c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  a0:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  a4:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  a8:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  ac:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  b0:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  b4:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  b8:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  bc:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  c0:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  c4:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  c8:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d8 e0       	ldi	r29, 0x08	; 8
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_clear_bss>:
  d8:	21 e0       	ldi	r18, 0x01	; 1
  da:	a0 e0       	ldi	r26, 0x00	; 0
  dc:	b1 e0       	ldi	r27, 0x01	; 1
  de:	01 c0       	rjmp	.+2      	; 0xe2 <.do_clear_bss_start>

000000e0 <.do_clear_bss_loop>:
  e0:	1d 92       	st	X+, r1

000000e2 <.do_clear_bss_start>:
  e2:	a8 30       	cpi	r26, 0x08	; 8
  e4:	b2 07       	cpc	r27, r18
  e6:	e1 f7       	brne	.-8      	; 0xe0 <.do_clear_bss_loop>
  e8:	0e 94 27 01 	call	0x24e	; 0x24e <main>
  ec:	0c 94 39 02 	jmp	0x472	; 0x472 <_exit>

000000f0 <__bad_interrupt>:
  f0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f4 <timer>:
		}
	}
}

void timer() {
	PORTE &= ~(1<<5); // timer LED on
  f4:	75 98       	cbi	0x0e, 5	; 14
	mode = 0; // stopped
  f6:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <mode+0x1>
  fa:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <mode>
	while (!bit_is_clear(PINE, PE6)) { // read input
  fe:	66 9b       	sbis	0x0c, 6	; 12
 100:	04 c0       	rjmp	.+8      	; 0x10a <timer+0x16>
		PORTD = PINA;
 102:	80 b1       	in	r24, 0x00	; 0
 104:	8b b9       	out	0x0b, r24	; 11
}

void timer() {
	PORTE &= ~(1<<5); // timer LED on
	mode = 0; // stopped
	while (!bit_is_clear(PINE, PE6)) { // read input
 106:	66 99       	sbic	0x0c, 6	; 12
 108:	fc cf       	rjmp	.-8      	; 0x102 <timer+0xe>
		PORTD = PINA;
	}
	while (bit_is_clear(PINE, PE6)) {} // confirm input
 10a:	66 9b       	sbis	0x0c, 6	; 12
 10c:	fe cf       	rjmp	.-4      	; 0x10a <timer+0x16>
		if (bit_is_clear(PINA, PA0)) { // start timer
			mode = 2;
		} else if (bit_is_clear(PINA, PA1)) { // stop
			mode = 0;
		} else if (bit_is_clear(PINA, PA2)) { // clear
			mode = -1;
 10e:	2f ef       	ldi	r18, 0xFF	; 255
 110:	3f ef       	ldi	r19, 0xFF	; 255
		PORTD = PINA;
	}
	while (bit_is_clear(PINE, PE6)) {} // confirm input
	while(1) {
		if (bit_is_clear(PINA, PA0)) { // start timer
			mode = 2;
 112:	82 e0       	ldi	r24, 0x02	; 2
 114:	90 e0       	ldi	r25, 0x00	; 0
	while (!bit_is_clear(PINE, PE6)) { // read input
		PORTD = PINA;
	}
	while (bit_is_clear(PINE, PE6)) {} // confirm input
	while(1) {
		if (bit_is_clear(PINA, PA0)) { // start timer
 116:	00 99       	sbic	0x00, 0	; 0
 118:	05 c0       	rjmp	.+10     	; 0x124 <timer+0x30>
			mode = 2;
 11a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <mode+0x1>
 11e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <mode>
 122:	f9 cf       	rjmp	.-14     	; 0x116 <timer+0x22>
		} else if (bit_is_clear(PINA, PA1)) { // stop
 124:	01 99       	sbic	0x00, 1	; 0
 126:	05 c0       	rjmp	.+10     	; 0x132 <timer+0x3e>
			mode = 0;
 128:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <mode+0x1>
 12c:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <mode>
 130:	f2 cf       	rjmp	.-28     	; 0x116 <timer+0x22>
		} else if (bit_is_clear(PINA, PA2)) { // clear
 132:	02 99       	sbic	0x00, 2	; 0
 134:	05 c0       	rjmp	.+10     	; 0x140 <timer+0x4c>
			mode = -1;
 136:	30 93 03 01 	sts	0x0103, r19	; 0x800103 <mode+0x1>
 13a:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <mode>
 13e:	eb cf       	rjmp	.-42     	; 0x116 <timer+0x22>
		} else if (bit_is_clear(PINE, PE6)) { // exit timer
 140:	66 99       	sbic	0x0c, 6	; 12
 142:	e9 cf       	rjmp	.-46     	; 0x116 <timer+0x22>
			PORTE |= (1<<5); // timer LED off
 144:	75 9a       	sbi	0x0e, 5	; 14
			mode = -1;
 146:	8f ef       	ldi	r24, 0xFF	; 255
 148:	9f ef       	ldi	r25, 0xFF	; 255
 14a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <mode+0x1>
 14e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <mode>
			while (bit_is_clear(PINE, PE6)) {} // wait until release
 152:	66 9b       	sbis	0x0c, 6	; 12
 154:	fe cf       	rjmp	.-4      	; 0x152 <timer+0x5e>
			return;
		}
	}
}
 156:	08 95       	ret

00000158 <sound>:

void sound(int mode)
{
 158:	cf 93       	push	r28
 15a:	df 93       	push	r29
	if(mode == 1){ //generates sound for start
 15c:	81 30       	cpi	r24, 0x01	; 1
 15e:	91 05       	cpc	r25, r1
 160:	d9 f4       	brne	.+54     	; 0x198 <sound+0x40>
 162:	24 e0       	ldi	r18, 0x04	; 4
 164:	30 e0       	ldi	r19, 0x00	; 0
		for(int i = 0; i < 4; i++){
			PORTE ^= 0xBF;  //toggle output
 166:	6f eb       	ldi	r22, 0xBF	; 191
			TCNT2 = -175;
 168:	c2 eb       	ldi	r28, 0xB2	; 178
 16a:	d0 e0       	ldi	r29, 0x00	; 0
 16c:	51 e5       	ldi	r21, 0x51	; 81
			TCCR2A = 0x00;
 16e:	a0 eb       	ldi	r26, 0xB0	; 176
 170:	b0 e0       	ldi	r27, 0x00	; 0
			TCCR2B = 0x04;
 172:	e1 eb       	ldi	r30, 0xB1	; 177
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	44 e0       	ldi	r20, 0x04	; 4
			while((TIFR2&(1<<TOV2))==0);
			TCCR2A = 0x00;
			TCCR2B = 0x00;
			TIFR2 = 0x1;
 178:	91 e0       	ldi	r25, 0x01	; 1

void sound(int mode)
{
	if(mode == 1){ //generates sound for start
		for(int i = 0; i < 4; i++){
			PORTE ^= 0xBF;  //toggle output
 17a:	8e b1       	in	r24, 0x0e	; 14
 17c:	86 27       	eor	r24, r22
 17e:	8e b9       	out	0x0e, r24	; 14
			TCNT2 = -175;
 180:	58 83       	st	Y, r21
			TCCR2A = 0x00;
 182:	1c 92       	st	X, r1
			TCCR2B = 0x04;
 184:	40 83       	st	Z, r20
			while((TIFR2&(1<<TOV2))==0);
 186:	b8 9b       	sbis	0x17, 0	; 23
 188:	fe cf       	rjmp	.-4      	; 0x186 <sound+0x2e>
			TCCR2A = 0x00;
 18a:	1c 92       	st	X, r1
			TCCR2B = 0x00;
 18c:	10 82       	st	Z, r1
			TIFR2 = 0x1;
 18e:	97 bb       	out	0x17, r25	; 23
 190:	21 50       	subi	r18, 0x01	; 1
 192:	31 09       	sbc	r19, r1
}

void sound(int mode)
{
	if(mode == 1){ //generates sound for start
		for(int i = 0; i < 4; i++){
 194:	91 f7       	brne	.-28     	; 0x17a <sound+0x22>
 196:	1c c0       	rjmp	.+56     	; 0x1d0 <sound+0x78>
			TCCR2A = 0x00;
			TCCR2B = 0x00;
			TIFR2 = 0x1;
		}
	}
	else if(mode == 0){  //generates sound for stop
 198:	89 2b       	or	r24, r25
 19a:	d1 f4       	brne	.+52     	; 0x1d0 <sound+0x78>
 19c:	22 e0       	ldi	r18, 0x02	; 2
 19e:	30 e0       	ldi	r19, 0x00	; 0
		for(int i = 0; i < 2; i++){
			PORTE ^= 0xBF;  //toggle output
 1a0:	6f eb       	ldi	r22, 0xBF	; 191
			TCNT2 = -200;
 1a2:	c2 eb       	ldi	r28, 0xB2	; 178
 1a4:	d0 e0       	ldi	r29, 0x00	; 0
 1a6:	58 e3       	ldi	r21, 0x38	; 56
			TCCR2A = 0x00;
 1a8:	a0 eb       	ldi	r26, 0xB0	; 176
 1aa:	b0 e0       	ldi	r27, 0x00	; 0
			TCCR2B = 0x04;
 1ac:	e1 eb       	ldi	r30, 0xB1	; 177
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	44 e0       	ldi	r20, 0x04	; 4
			while((TIFR2&(1<<TOV2))==0);
			TCCR2A = 0x00;
			TCCR2B = 0x00;
			TIFR2 = 0x1;
 1b2:	91 e0       	ldi	r25, 0x01	; 1
			TIFR2 = 0x1;
		}
	}
	else if(mode == 0){  //generates sound for stop
		for(int i = 0; i < 2; i++){
			PORTE ^= 0xBF;  //toggle output
 1b4:	8e b1       	in	r24, 0x0e	; 14
 1b6:	86 27       	eor	r24, r22
 1b8:	8e b9       	out	0x0e, r24	; 14
			TCNT2 = -200;
 1ba:	58 83       	st	Y, r21
			TCCR2A = 0x00;
 1bc:	1c 92       	st	X, r1
			TCCR2B = 0x04;
 1be:	40 83       	st	Z, r20
			while((TIFR2&(1<<TOV2))==0);
 1c0:	b8 9b       	sbis	0x17, 0	; 23
 1c2:	fe cf       	rjmp	.-4      	; 0x1c0 <sound+0x68>
			TCCR2A = 0x00;
 1c4:	1c 92       	st	X, r1
			TCCR2B = 0x00;
 1c6:	10 82       	st	Z, r1
			TIFR2 = 0x1;
 1c8:	97 bb       	out	0x17, r25	; 23
 1ca:	21 50       	subi	r18, 0x01	; 1
 1cc:	31 09       	sbc	r19, r1
			TCCR2B = 0x00;
			TIFR2 = 0x1;
		}
	}
	else if(mode == 0){  //generates sound for stop
		for(int i = 0; i < 2; i++){
 1ce:	91 f7       	brne	.-28     	; 0x1b4 <sound+0x5c>
			TCCR2B = 0x00;
			TIFR2 = 0x1;
		}
	}
	return;
}
 1d0:	df 91       	pop	r29
 1d2:	cf 91       	pop	r28
 1d4:	08 95       	ret

000001d6 <USART_Init>:

void USART_Init(unsigned long BR){
	UCSR1B |= (1 << RXEN) | (1 << TXEN);
 1d6:	e9 ec       	ldi	r30, 0xC9	; 201
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	20 81       	ld	r18, Z
 1dc:	28 61       	ori	r18, 0x18	; 24
 1de:	20 83       	st	Z, r18
	UCSR1C |= (1 << UCSZ1) | (1 << UCSZ0);
 1e0:	ea ec       	ldi	r30, 0xCA	; 202
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	20 81       	ld	r18, Z
 1e6:	26 60       	ori	r18, 0x06	; 6
 1e8:	20 83       	st	Z, r18

	unsigned int my_ubrr = (F_CPU/(16*BR)) - 1;
 1ea:	dc 01       	movw	r26, r24
 1ec:	cb 01       	movw	r24, r22
 1ee:	88 0f       	add	r24, r24
 1f0:	99 1f       	adc	r25, r25
 1f2:	aa 1f       	adc	r26, r26
 1f4:	bb 1f       	adc	r27, r27
 1f6:	88 0f       	add	r24, r24
 1f8:	99 1f       	adc	r25, r25
 1fa:	aa 1f       	adc	r26, r26
 1fc:	bb 1f       	adc	r27, r27
 1fe:	9c 01       	movw	r18, r24
 200:	ad 01       	movw	r20, r26
 202:	22 0f       	add	r18, r18
 204:	33 1f       	adc	r19, r19
 206:	44 1f       	adc	r20, r20
 208:	55 1f       	adc	r21, r21
 20a:	22 0f       	add	r18, r18
 20c:	33 1f       	adc	r19, r19
 20e:	44 1f       	adc	r20, r20
 210:	55 1f       	adc	r21, r21
 212:	60 e0       	ldi	r22, 0x00	; 0
 214:	74 e2       	ldi	r23, 0x24	; 36
 216:	84 ef       	ldi	r24, 0xF4	; 244
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	0e 94 17 02 	call	0x42e	; 0x42e <__udivmodsi4>
 21e:	21 50       	subi	r18, 0x01	; 1
 220:	31 09       	sbc	r19, r1
	
	UBRR1L = my_ubrr;
 222:	20 93 cc 00 	sts	0x00CC, r18	; 0x8000cc <__DATA_REGION_ORIGIN__+0x6c>
	UBRR1H = (my_ubrr >> 8);
 226:	30 93 cd 00 	sts	0x00CD, r19	; 0x8000cd <__DATA_REGION_ORIGIN__+0x6d>
 22a:	08 95       	ret

0000022c <USART_RxChar>:
}

unsigned char USART_RxChar()
{	
	if((UCSR1A & (1 << RXC)))
 22c:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__DATA_REGION_ORIGIN__+0x68>
 230:	88 23       	and	r24, r24
 232:	1c f4       	brge	.+6      	; 0x23a <USART_RxChar+0xe>
		return UDR1;
 234:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__DATA_REGION_ORIGIN__+0x6e>
 238:	08 95       	ret
	else
		return '\0';
 23a:	80 e0       	ldi	r24, 0x00	; 0
}
 23c:	08 95       	ret

0000023e <USART_TxChar>:

void USART_TxChar(char data)
{
	UDR1 = data;
 23e:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__DATA_REGION_ORIGIN__+0x6e>
	while(!(UCSR1A & (1 << UDRE)));
 242:	e8 ec       	ldi	r30, 0xC8	; 200
 244:	f0 e0       	ldi	r31, 0x00	; 0
 246:	80 81       	ld	r24, Z
 248:	85 ff       	sbrs	r24, 5
 24a:	fd cf       	rjmp	.-6      	; 0x246 <USART_TxChar+0x8>
}
 24c:	08 95       	ret

0000024e <main>:
int mode = 0;
unsigned char output_mode = '\0';
char message = '\0';

int main() {
	DDRD = 0xFB; // make ouput (PD2 is input)
 24e:	8b ef       	ldi	r24, 0xFB	; 251
 250:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0xFF; // turn off active high LEDs
 252:	8f ef       	ldi	r24, 0xFF	; 255
 254:	8b b9       	out	0x0b, r24	; 11
	DDRE = 0xBF; // make port 6 input, rest output
 256:	9f eb       	ldi	r25, 0xBF	; 191
 258:	9d b9       	out	0x0d, r25	; 13
	PORTE |= (1<<5); // 5th LED off
 25a:	75 9a       	sbi	0x0e, 5	; 14
	DDRA = 0x00; // make PA input
 25c:	11 b8       	out	0x01, r1	; 1
	PORTA = 0xFF; // enable pull up on PA
 25e:	82 b9       	out	0x02, r24	; 2
	
	TCNT0 = -125;
 260:	83 e8       	ldi	r24, 0x83	; 131
 262:	86 bd       	out	0x26, r24	; 38
	TCCR0A = 0x00;
 264:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0x04;
 266:	84 e0       	ldi	r24, 0x04	; 4
 268:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = 0x01;
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
	
	USART_Init(BAUDRATE);
 270:	60 e8       	ldi	r22, 0x80	; 128
 272:	75 e2       	ldi	r23, 0x25	; 37
 274:	80 e0       	ldi	r24, 0x00	; 0
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <USART_Init>
	sei();
 27c:	78 94       	sei
	
	iterations = 0;
 27e:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <iterations>
	halfPer = 0;
 282:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <halfPer>
			mode = 0;
			sound(mode);
		} else if (bit_is_clear(PINA, PA2)) { // clear button
			mode = -1;
		} else if (bit_is_clear(PINE, PE6)) { // timer mode
			mode = -1;
 286:	0f ef       	ldi	r16, 0xFF	; 255
 288:	1f ef       	ldi	r17, 0xFF	; 255
	iterations = 0;
	halfPer = 0;
	
	while (1) {
		if (bit_is_clear(PINA, PA0)) { // start button
			mode = 1;
 28a:	c1 e0       	ldi	r28, 0x01	; 1
 28c:	d0 e0       	ldi	r29, 0x00	; 0
			timer();
		}
		output_mode = USART_RxChar();  //check to see if user wants to know mode
		if(output_mode == 'M'){   //user must inquire 'M' for a mode update
			if(mode == 1){
				message = 'S';  //system responds with 'S' if in Stopwatch
 28e:	0f 2e       	mov	r0, r31
 290:	f3 e5       	ldi	r31, 0x53	; 83
 292:	ff 2e       	mov	r15, r31
 294:	f0 2d       	mov	r31, r0
				USART_TxChar(message);
			}
			if(mode == 2){
				message = 'T';  //system responds with 'T' if in Timer
 296:	0f 2e       	mov	r0, r31
 298:	f4 e5       	ldi	r31, 0x54	; 84
 29a:	ef 2e       	mov	r14, r31
 29c:	f0 2d       	mov	r31, r0
	
	iterations = 0;
	halfPer = 0;
	
	while (1) {
		if (bit_is_clear(PINA, PA0)) { // start button
 29e:	00 99       	sbic	0x00, 0	; 0
 2a0:	08 c0       	rjmp	.+16     	; 0x2b2 <main+0x64>
			mode = 1;
 2a2:	d0 93 03 01 	sts	0x0103, r29	; 0x800103 <mode+0x1>
 2a6:	c0 93 02 01 	sts	0x0102, r28	; 0x800102 <mode>
			sound(mode);
 2aa:	ce 01       	movw	r24, r28
 2ac:	0e 94 ac 00 	call	0x158	; 0x158 <sound>
 2b0:	1c c0       	rjmp	.+56     	; 0x2ea <main+0x9c>
		} else if (bit_is_clear(PINA, PA1)) { // stop button
 2b2:	01 99       	sbic	0x00, 1	; 0
 2b4:	09 c0       	rjmp	.+18     	; 0x2c8 <main+0x7a>
			mode = 0;
 2b6:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <mode+0x1>
 2ba:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <mode>
			sound(mode);
 2be:	80 e0       	ldi	r24, 0x00	; 0
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	0e 94 ac 00 	call	0x158	; 0x158 <sound>
 2c6:	11 c0       	rjmp	.+34     	; 0x2ea <main+0x9c>
		} else if (bit_is_clear(PINA, PA2)) { // clear button
 2c8:	02 99       	sbic	0x00, 2	; 0
 2ca:	05 c0       	rjmp	.+10     	; 0x2d6 <main+0x88>
			mode = -1;
 2cc:	10 93 03 01 	sts	0x0103, r17	; 0x800103 <mode+0x1>
 2d0:	00 93 02 01 	sts	0x0102, r16	; 0x800102 <mode>
 2d4:	0a c0       	rjmp	.+20     	; 0x2ea <main+0x9c>
		} else if (bit_is_clear(PINE, PE6)) { // timer mode
 2d6:	66 99       	sbic	0x0c, 6	; 12
 2d8:	08 c0       	rjmp	.+16     	; 0x2ea <main+0x9c>
			mode = -1;
 2da:	10 93 03 01 	sts	0x0103, r17	; 0x800103 <mode+0x1>
 2de:	00 93 02 01 	sts	0x0102, r16	; 0x800102 <mode>
			while (bit_is_clear(PINE, PE6)) {} // wait until release
 2e2:	66 9b       	sbis	0x0c, 6	; 12
 2e4:	fe cf       	rjmp	.-4      	; 0x2e2 <main+0x94>
			timer();
 2e6:	0e 94 7a 00 	call	0xf4	; 0xf4 <timer>
		}
		output_mode = USART_RxChar();  //check to see if user wants to know mode
 2ea:	0e 94 16 01 	call	0x22c	; 0x22c <USART_RxChar>
 2ee:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <output_mode>
		if(output_mode == 'M'){   //user must inquire 'M' for a mode update
 2f2:	8d 34       	cpi	r24, 0x4D	; 77
 2f4:	a1 f6       	brne	.-88     	; 0x29e <main+0x50>
			if(mode == 1){
 2f6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <mode>
 2fa:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <mode+0x1>
 2fe:	01 97       	sbiw	r24, 0x01	; 1
 300:	29 f4       	brne	.+10     	; 0x30c <main+0xbe>
				message = 'S';  //system responds with 'S' if in Stopwatch
 302:	f0 92 00 01 	sts	0x0100, r15	; 0x800100 <_edata>
				USART_TxChar(message);
 306:	8f 2d       	mov	r24, r15
 308:	0e 94 1f 01 	call	0x23e	; 0x23e <USART_TxChar>
			}
			if(mode == 2){
 30c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <mode>
 310:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <mode+0x1>
 314:	02 97       	sbiw	r24, 0x02	; 2
 316:	19 f6       	brne	.-122    	; 0x29e <main+0x50>
				message = 'T';  //system responds with 'T' if in Timer
 318:	e0 92 00 01 	sts	0x0100, r14	; 0x800100 <_edata>
				USART_TxChar(message);
 31c:	8e 2d       	mov	r24, r14
 31e:	0e 94 1f 01 	call	0x23e	; 0x23e <USART_TxChar>
 322:	bd cf       	rjmp	.-134    	; 0x29e <main+0x50>

00000324 <__vector_18>:
{
	UDR1 = data;
	while(!(UCSR1A & (1 << UDRE)));
}

ISR (TIMER0_OVF_vect) { // mode interrupt 1/10 of second
 324:	1f 92       	push	r1
 326:	0f 92       	push	r0
 328:	0f b6       	in	r0, 0x3f	; 63
 32a:	0f 92       	push	r0
 32c:	11 24       	eor	r1, r1
 32e:	2f 93       	push	r18
 330:	3f 93       	push	r19
 332:	8f 93       	push	r24
 334:	9f 93       	push	r25
	iterations += 1;
 336:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <iterations>
 33a:	8f 5f       	subi	r24, 0xFF	; 255
 33c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <iterations>
	if (iterations < TOT_ITERATIONS) {
 340:	89 31       	cpi	r24, 0x19	; 25
 342:	18 f4       	brcc	.+6      	; 0x34a <__vector_18+0x26>
		TCNT0 = -125;
 344:	83 e8       	ldi	r24, 0x83	; 131
 346:	86 bd       	out	0x26, r24	; 38
 348:	69 c0       	rjmp	.+210    	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
	} else if (halfPer < TOT_HALF_PER) {
 34a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <halfPer>
 34e:	8a 30       	cpi	r24, 0x0A	; 10
 350:	08 f0       	brcs	.+2      	; 0x354 <__vector_18+0x30>
 352:	5e c0       	rjmp	.+188    	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
		PORTD ^= (ones*16 + tenth);
 354:	9b b1       	in	r25, 0x0b	; 11
 356:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <ones>
 35a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <tenth>
 35e:	30 e1       	ldi	r19, 0x10	; 16
 360:	23 9f       	mul	r18, r19
 362:	80 0d       	add	r24, r0
 364:	11 24       	eor	r1, r1
 366:	89 27       	eor	r24, r25
 368:	8b b9       	out	0x0b, r24	; 11
		if (mode == 1) { // stopwatch
 36a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <mode>
 36e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <mode+0x1>
 372:	81 30       	cpi	r24, 0x01	; 1
 374:	91 05       	cpc	r25, r1
 376:	a9 f4       	brne	.+42     	; 0x3a2 <__vector_18+0x7e>
			tenth++;
 378:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <tenth>
 37c:	8f 5f       	subi	r24, 0xFF	; 255
			if (tenth == 10) {
 37e:	8a 30       	cpi	r24, 0x0A	; 10
 380:	19 f0       	breq	.+6      	; 0x388 <__vector_18+0x64>
	if (iterations < TOT_ITERATIONS) {
		TCNT0 = -125;
	} else if (halfPer < TOT_HALF_PER) {
		PORTD ^= (ones*16 + tenth);
		if (mode == 1) { // stopwatch
			tenth++;
 382:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <tenth>
 386:	2f c0       	rjmp	.+94     	; 0x3e6 <__vector_18+0xc2>
			if (tenth == 10) {
				tenth = 0;
 388:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <tenth>
				ones++;
 38c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <ones>
 390:	8f 5f       	subi	r24, 0xFF	; 255
				if (ones == 10) {
 392:	8a 30       	cpi	r24, 0x0A	; 10
 394:	19 f0       	breq	.+6      	; 0x39c <__vector_18+0x78>
		PORTD ^= (ones*16 + tenth);
		if (mode == 1) { // stopwatch
			tenth++;
			if (tenth == 10) {
				tenth = 0;
				ones++;
 396:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <ones>
 39a:	25 c0       	rjmp	.+74     	; 0x3e6 <__vector_18+0xc2>
				if (ones == 10) {
					ones = 0;
 39c:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <ones>
 3a0:	22 c0       	rjmp	.+68     	; 0x3e6 <__vector_18+0xc2>
				}
			}
		} else if (mode == 2) { // timer
 3a2:	82 30       	cpi	r24, 0x02	; 2
 3a4:	91 05       	cpc	r25, r1
 3a6:	b9 f4       	brne	.+46     	; 0x3d6 <__vector_18+0xb2>
			if (tenth == 0) {
 3a8:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <tenth>
 3ac:	81 11       	cpse	r24, r1
 3ae:	0f c0       	rjmp	.+30     	; 0x3ce <__vector_18+0xaa>
				tenth = 9;
 3b0:	89 e0       	ldi	r24, 0x09	; 9
 3b2:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <tenth>
				if (ones == 0) {
 3b6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <ones>
 3ba:	81 11       	cpse	r24, r1
 3bc:	04 c0       	rjmp	.+8      	; 0x3c6 <__vector_18+0xa2>
					ones = 9;
 3be:	89 e0       	ldi	r24, 0x09	; 9
 3c0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <ones>
 3c4:	10 c0       	rjmp	.+32     	; 0x3e6 <__vector_18+0xc2>
				} else {
					ones--;
 3c6:	81 50       	subi	r24, 0x01	; 1
 3c8:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <ones>
 3cc:	0c c0       	rjmp	.+24     	; 0x3e6 <__vector_18+0xc2>
				}
			} else {
				tenth--;
 3ce:	81 50       	subi	r24, 0x01	; 1
 3d0:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <tenth>
 3d4:	08 c0       	rjmp	.+16     	; 0x3e6 <__vector_18+0xc2>
			}
		} else if (mode == -1) { // clear
 3d6:	01 96       	adiw	r24, 0x01	; 1
 3d8:	31 f4       	brne	.+12     	; 0x3e6 <__vector_18+0xc2>
			tenth = 0;
 3da:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <tenth>
			ones = 0;
 3de:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <ones>
			PORTD = 0xFF;
 3e2:	8f ef       	ldi	r24, 0xFF	; 255
 3e4:	8b b9       	out	0x0b, r24	; 11
		}
		PORTD ^= (ones*16 + tenth);
 3e6:	9b b1       	in	r25, 0x0b	; 11
 3e8:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <ones>
 3ec:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <tenth>
 3f0:	30 e1       	ldi	r19, 0x10	; 16
 3f2:	23 9f       	mul	r18, r19
 3f4:	80 0d       	add	r24, r0
 3f6:	11 24       	eor	r1, r1
 3f8:	89 27       	eor	r24, r25
 3fa:	8b b9       	out	0x0b, r24	; 11
		iterations = 0;
 3fc:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <iterations>
		TCNT0 = -125;
 400:	83 e8       	ldi	r24, 0x83	; 131
 402:	86 bd       	out	0x26, r24	; 38
		halfPer += 1;
 404:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <halfPer>
 408:	8f 5f       	subi	r24, 0xFF	; 255
 40a:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <halfPer>
 40e:	06 c0       	rjmp	.+12     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
	} else {
		iterations = 0;
 410:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <iterations>
		halfPer = 0;
 414:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <halfPer>
		TCNT0 = -125;
 418:	83 e8       	ldi	r24, 0x83	; 131
 41a:	86 bd       	out	0x26, r24	; 38
	}
}
 41c:	9f 91       	pop	r25
 41e:	8f 91       	pop	r24
 420:	3f 91       	pop	r19
 422:	2f 91       	pop	r18
 424:	0f 90       	pop	r0
 426:	0f be       	out	0x3f, r0	; 63
 428:	0f 90       	pop	r0
 42a:	1f 90       	pop	r1
 42c:	18 95       	reti

0000042e <__udivmodsi4>:
 42e:	a1 e2       	ldi	r26, 0x21	; 33
 430:	1a 2e       	mov	r1, r26
 432:	aa 1b       	sub	r26, r26
 434:	bb 1b       	sub	r27, r27
 436:	fd 01       	movw	r30, r26
 438:	0d c0       	rjmp	.+26     	; 0x454 <__udivmodsi4_ep>

0000043a <__udivmodsi4_loop>:
 43a:	aa 1f       	adc	r26, r26
 43c:	bb 1f       	adc	r27, r27
 43e:	ee 1f       	adc	r30, r30
 440:	ff 1f       	adc	r31, r31
 442:	a2 17       	cp	r26, r18
 444:	b3 07       	cpc	r27, r19
 446:	e4 07       	cpc	r30, r20
 448:	f5 07       	cpc	r31, r21
 44a:	20 f0       	brcs	.+8      	; 0x454 <__udivmodsi4_ep>
 44c:	a2 1b       	sub	r26, r18
 44e:	b3 0b       	sbc	r27, r19
 450:	e4 0b       	sbc	r30, r20
 452:	f5 0b       	sbc	r31, r21

00000454 <__udivmodsi4_ep>:
 454:	66 1f       	adc	r22, r22
 456:	77 1f       	adc	r23, r23
 458:	88 1f       	adc	r24, r24
 45a:	99 1f       	adc	r25, r25
 45c:	1a 94       	dec	r1
 45e:	69 f7       	brne	.-38     	; 0x43a <__udivmodsi4_loop>
 460:	60 95       	com	r22
 462:	70 95       	com	r23
 464:	80 95       	com	r24
 466:	90 95       	com	r25
 468:	9b 01       	movw	r18, r22
 46a:	ac 01       	movw	r20, r24
 46c:	bd 01       	movw	r22, r26
 46e:	cf 01       	movw	r24, r30
 470:	08 95       	ret

00000472 <_exit>:
 472:	f8 94       	cli

00000474 <__stop_program>:
 474:	ff cf       	rjmp	.-2      	; 0x474 <__stop_program>
